setwd("UniversalBank1")
bank = read.csv("UniversalBank1")
bank$Education = as.factor(bank$Education)
bank_dummy = dummy.data.frame(select(bank,-c(ZIP.Code,ID)))
bank_dummy$Personal.Loan = as.factor(bank_dummy$Personal.Loan)
bank_dummy$CCAvg = as.integer(bank_dummy$CCAvg)
#install.packages("caret")
library(caret )
#install.packages("UniversalBank1")
library(universalbank1)
summary(universalbank1)
summary(ID)
library(datasets)
run
summary(universalbank1)
dataframe <- A
x_train, x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
UniversalBank <- read.csv("C:/Users/farcu/OneDrive/UniversalBank.csv")
View(UniversalBank)
# read file
univ_df = pd.read_cvs('universalbank.cvs')
UniversalBank.drop(columns=['ID','ZIP Code'])
universalbank = univ_df
View(df)
View(UniversalBank)
View(UniversalBank)
library(readr)
univ_df <- read_csv("UniversalBank.csv")
View(univ_df)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
univ_df.head(6)
univ_df = pd.read_cvs('universalBank.cvs')
UniversalBank.head(6)
summary(UniversalBank)
head(UniversalBank)
univ_df <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
UniversalBank <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
set.seed(6)
select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card
set.seed(6)
Test_Index = createDataPartition(UniversalBank,p=0.4, list=FALSE)
Test_Data = UniversalBank[Test_Index,]
TraVal_Data = UniversalBank[-Test_Index,]
Train_Index = createDataPartition(UniversalBank,p=0.6, list=FALSE) # 75% of remaining data as training
Train_Data = TraVal_Data[Train_Index,]
Validation_Data = TraVal_Data[-Train_Index,] # rest as validation
summary(Train_Data)
summary(test_data)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = universalbank.drop(columns=['ID','ZIP Code'])
x=UniversalBank['education']
UniversalBank=data.frame()
data.frame(UniversalBank)
data.frame(univ_df)
x=univ_df['education']
training_df, valid_df = train_test_split(univ_df,test_size = 0.4, random_state=1)
data.frame(training)
print('training data')
print('validation data')
new_univ = pd.dataframe(['age':40, 'experience' :10, 'income': 84, 'family' : 2, 'CCAvg' :2, 'education' : 0, 'education' :1, 'mortgage' :0, 'securities account' :0, 'CD Account':0, 'Online' :1, 'credit card' :1])
predictors=list(UniversalBank.columns)
predictors=list(univ_df.columns)
load("C:/Users/farcu/OneDrive/Documents/.RData")
library(universalbank1)
summary(universalbank1)
summary(ID)
library(datasets)
run
summary(universalbank1)
dataframe <- A
x_train, x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
x_test, y_train, y_test = train.testsplit(x, y, test_size=0.3, random_state=42)
UniversalBank <- read.csv("C:/Users/farcu/OneDrive/UniversalBank.csv")
View(UniversalBank)
# read file
univ_df = pd.read_cvs('universalbank.cvs')
UniversalBank.drop(columns=['ID','ZIP Code'])
universalbank = univ_df
View(df)
View(UniversalBank)
View(UniversalBank)
library(readr)
univ_df <- read_csv("UniversalBank.csv")
View(univ_df)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
univ_df.head(6)
univ_df = pd.read_cvs('universalBank.cvs')
UniversalBank.head(6)
summary(UniversalBank)
head(UniversalBank)
univ_df <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
UniversalBank <- select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card)
set.seed(6)
select(age,experience,income,family,CCAvg,Education,mortgage,securities account,CD Account,online,credit card
set.seed(6)
Test_Index = createDataPartition(UniversalBank,p=0.4, list=FALSE)
Test_Data = UniversalBank[Test_Index,]
TraVal_Data = UniversalBank[-Test_Index,]
Train_Index = createDataPartition(UniversalBank,p=0.6, list=FALSE) # 75% of remaining data as training
Train_Data = TraVal_Data[Train_Index,]
Validation_Data = TraVal_Data[-Train_Index,] # rest as validation
summary(Train_Data)
summary(test_data)
univ_df = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = univ_df.drop(columns=['ID','ZIP Code'])
UniversalBank = universalbank.drop(columns=['ID','ZIP Code'])
x=UniversalBank['education']
UniversalBank=data.frame()
data.frame(UniversalBank)
data.frame(univ_df)
x=univ_df['education']
training_df, valid_df = train_test_split(univ_df,test_size = 0.4, random_state=1)
data.frame(training)
print('training data')
print('validation data')
new_univ = pd.dataframe(['age':40, 'experience' :10, 'income': 84, 'family' : 2, 'CCAvg' :2, 'education' : 0, 'education' :1, 'mortgage' :0, 'securities account' :0, 'CD Account':0, 'Online' :1, 'credit card' :1])
predictors=list(UniversalBank.columns)
predictors=list(univ_df.columns)
predictors.remove(outcome)
predict.remove(outcome)
print(age,experience,income,family,CCAvg,Mortgage,CD_Account,Online,Credit Card,Education_1,Education_2,Education_3)
scaler = preprocessing.standardscaler(age)
scaler.fit(univ_df[predictor])
classifier = KneighborsClassifier(n_neighbors=1)
classifer.fit(train_x,train_y)
results = []
knn = KneighborsClassifier(n_neighbors=k).fit(train_x,train_y)
results.append({'k':k,'accuracy':accuracy_score(train_y, knn.predict(train_x))})
results=pd.dataframe(resuls)
p=results.plot.scatter(x='k', y='accuracy',xlim=[0,30])
classifier=Kneighborsclassifier(n_neighbors=5)
classifier.fit(train_x,train_y)
predict_y = classifier.predict(valid_X)
print(confusion_matrix(valid_y,predict_y))
print('accuracy' :accuracy_score(valid_y,predict_y))
test_data=univ_df(test_data)
